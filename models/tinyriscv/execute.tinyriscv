/*
TinyRISCV execution
*/

helper uint32 get_pc()
{
	return read_register(PC);
}

helper uint32 read_gpr(uint32 gpr_idx)
{
	if(gpr_idx == 0) { 
		return (uint32)0;
	} else {
		return read_register_bank(GPR, gpr_idx);
	}
}

// 32-Base Instructions
execute(addi)
{
	sint32 imm = inst.imm;
	imm <<= 20;
	imm >>= 20;

	
	uint32 rs = read_gpr(inst.rs1);

	rs += (sint32)imm;

	write_register_bank(GPR, inst.rd, rs);

}

execute(add)
{
	uint32 rs1 = read_gpr(inst.rs1);
	uint32 rs2 = read_gpr(inst.rs2);

	rs1 += rs2;

	write_register_bank(GPR, inst.rd, rs1);

}

execute(mul)
{
	uint32 rs1 = read_gpr(inst.rs1);
	uint32 rs2 = read_gpr(inst.rs2);

	rs1 *= rs2;

	write_register_bank(GPR, inst.rd, rs1);

}

execute(jal)
{
	uint32 addr = get_pc()+4;

	write_register_bank(GPR, inst.rd, addr);

	uint32 pc = get_pc();
	pc += (sint32)(inst.j_offset);
	write_register(PC, pc);
}

// TODO figure out what's going on here
execute(jalr)
{
	uint32 link_address = get_pc() + 4;

	sint32 imm = inst.imm;

	imm <<= 20;
	imm >>= 20;

	sint32 rs = read_gpr(inst.rs1);

    // zero out LSB
	rs += (sint32)imm;
	rs >>= 1;
	rs <<= 1;

	//rs = rs + (imm & ~1);	

	write_register(PC, rs);
	write_register_bank(GPR, inst.rd, link_address);
}


helper sint32 get_branch_offset(struct Instruction &inst)
{
	uint32 imm4 = inst.imm4;
	uint32 imm3 = inst.imm3;
	uint32 imm2 = inst.imm2;
	uint32 imm1 = inst.imm1;

	// enforce 12 bit max for immediate
	sint32 imm = (imm4 << 11) | (imm3 << 10) | (imm2 << 4) | imm1;
	imm <<= 20;
	imm >>= 20;
	
	return imm;
}

execute(bne)
{       
	sint32 imm = get_branch_offset(inst);
	
	uint32 rs1 = read_gpr(inst.rs1);
	uint32 rs2 = read_gpr(inst.rs2);
	
	uint32 pc = get_pc();
	
	uint32 addr = pc + imm * 2;
	
	pc = (rs1 != rs2) ? addr : (pc + 4);

	write_register(PC, pc);

}

execute(lw)
{
	sint32 imm = inst.imm;
	imm <<= 20;
	imm >>= 20; 
	
	uint32 rs1 = read_gpr(inst.rs1);
	uint32 addr = rs1 +  (sint32)imm;

	uint32 val;
        
	mem_read_32(Mem, addr, val);

	sint32 result = (sint32)val;
	write_register_bank(GPR, inst.rd, result);

}

execute(sw)
{
	uint32 imm2 = inst.imm2;
	uint32 imm1 = inst.imm1;
	sint32 imm = (imm2 << 5) | imm1;

	imm <<= 20;
	imm >>= 20;

	uint32 rs1 = read_gpr(inst.rs1);
	
	uint32 addr = rs1 + (sint32)imm;

	mem_write_32(Mem, addr, read_gpr(inst.rs2));
}

