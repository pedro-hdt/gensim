AC_ISA(tinyriscv)
{
    ac_fetchsize 32;

	/* Instructions for processing data - ALU */

	ac_format Type_I = "%imm:12 %rs1:5 %funct3:3 %rd:5 %opcode:7";

	ac_format Type_R = "%funct7:7 %rs2:5 %rs1:5 %funct3:3 %rd:5 %opcode:7";

	ac_format Type_S = "%imm2:7 %rs2:5 %rs1:5 %funct3:3 %imm1:5 %opcode:7";

	ac_format Type_B = "%imm4:1 %imm2:6 %rs2:5 %rs1:5 %funct3:3 %imm1:4 %imm3:1 %opcode:7";

	ac_format Type_J = "%imm4:1 %imm1:10 %imm2:1 %imm3:8 %rd:5 %opcode:7";

	///////////////////////////////////Base Instructions///////////////////////////////////////
	ac_instr<Type_J> jal;
	ac_field<sint32> j_offset; // jump offset field for constant jumps

	ac_instr<Type_I> jalr,lw,addi;

	ac_instr<Type_B> bne;

	ac_instr<Type_S> sw;

	ac_instr<Type_R> add, mul;

    // Register names
	ac_asm_map reg
	{
		"x"[0..31] = [0..31];
	}

    // Behaviours

	ac_behaviour add;
	ac_behaviour addi;
	ac_behaviour mul;

	ac_behaviour lw;
	ac_behaviour sw;

	ac_behaviour jal;
	ac_behaviour jalr;

	ac_behaviour bne;


    // ISA Constructor
	ISA_CTOR(tinyriscv)
	{
		ac_behaviours("behaviours.tinyriscv");
		ac_execute("execute.tinyriscv");

		jal.set_decoder(opcode=0x6F);
		jal.set_asm("jal %reg, %imm, %imm, %imm, %imm", rd, imm4, imm3, imm2, imm1);
		jal.set_behaviour(jal);
		jal.set_end_of_block();
		jal.set_fixed_jump(j_offset, RELATIVE, 0);

		jalr.set_decoder(funct3=0x0, opcode=0x67);
		jalr.set_asm("jalr %reg, %reg, %imm", rd, rs1, imm);
		jalr.set_behaviour(jalr);
		jalr.set_end_of_block();
		jalr.set_variable_jump();

		bne.set_decoder(funct3=0x1, opcode=0x63);
		bne.set_asm("bne %reg, %reg, %imm, %imm, %imm, %imm", rs1, rs2, imm4, imm3, imm2, imm1);
		bne.set_behaviour(bne);
		bne.set_end_of_block();
		bne.set_variable_jump();

		lw.set_decoder(funct3=0x2, opcode=0x03);
		lw.set_asm("lw %reg, %reg, %imm", rd, rs1, imm);
		lw.set_asm("lw %reg, %imm (%reg)", rd, imm, rs1);
		lw.set_behaviour(lw);

		sw.set_decoder(funct3=0x2, opcode=0x23);
		sw.set_asm("sw %reg, %reg, %imm, %imm", rs1, rs2, imm2, imm1);
		sw.set_asm("sw %reg, %imm, %imm (%reg)", rs2, imm2, imm1, rs1);
		sw.set_behaviour(sw);

		addi.set_decoder(funct3=0x0, opcode=0x13);
		addi.set_asm("addi %reg, %reg, %imm", rd, rs1, imm);
		addi.set_asm("mv %reg, %reg", rd, rs1, imm=0);
		addi.set_asm("nop", rd=0, rs1=0, imm=0);
		addi.set_asm("li %reg, %imm", rd, rs1=0, imm);
		addi.set_behaviour(addi);

		add.set_decoder(funct7=0x0, funct3=0x0, opcode=0x33);
		add.set_asm("add %reg, %reg, %reg", rd, rs1, rs2);
		add.set_behaviour(add);

		mul.set_decoder(funct7=0x1, funct3=0x0, opcode=0x33);
        mul.set_asm("mul %reg, %reg, %reg", rd, rs1, rs2);
        mul.set_behaviour(mul);

	};
};